@InProceedings{lam11:_soot_java,
  author =       {Patrick Lam and Eric Bodden and Ond\v{r}ej Lhot\'ak and Laurie Hendren},
  title =        {The {Soot} framework for {Java} program analysis: a retrospective},
  booktitle = {Cetus Users and Compiler Infrastructure Workshop},
  year =         2011,
  month =        {October},
  address =      {Galveston Island, TX}}
@inproceedings{Yan:2002:GGS:844380.844811,
 author = {Yan, Xifeng and Han, Jiawei},
 title = {gSpan: Graph-Based Substructure Pattern Mining},
 booktitle = {Proceedings of the 2002 IEEE International Conference on Data Mining},
 series = {ICDM '02},
 year = {2002},
 isbn = {0-7695-1754-4},
 pages = {721--},
 url = {http://dl.acm.org/citation.cfm?id=844380.844811},
 acmid = {844811},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}
@article{DBLP:journals/smr/ChangP12,
  author    = {Ray{-}Yaung Chang and
               Andy Podgurski},
  title     = {Discovering programming rules and violations by mining interprocedural
               dependences},
  journal   = {Journal of Software Maintenance},
  year      = {2012},
  volume    = {24},
  number    = {1},
  pages     = {51--66},
  url       = {http://dx.doi.org/10.1002/smr.532},
  doi       = {10.1002/smr.532},
  timestamp = {Mon, 29 Sep 2014 13:10:54 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/smr/ChangP12},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@inbook{
  FormalSoftwareVerification,
  author={Damiani,Ernesto and Ardagna,Claudio A. and El Ioini,Nabil},
  year={2009},
  title={Formal methods for software verification},
  publisher={Springer US},
  address={Boston, MA},
  pages={1-26},
  keywords={Computer Science; Programming Languages, Compilers, Interpreters; Data Structures, Cryptology and Information Theory; Software Engineering/Programming and Operating Systems; Data Encryption; Systems and Data Security; Information Systems Applications (incl.Internet)},
  isbn={0387773231; 9780387773230},
  language={English},
  url={www.summon.com},
}
@article{
  MiningSpecifications,
  author={Ammons,G. and Bodik,R. and Larus,JR},
  year={2002},
  title={Mining specifications},
  journal={ACM SIGPLAN NOTICES},
  volume={37},
  number={1},
  pages={4-16},
  abstract={Program verification is a promising approach to improving program quality. because it can search all possible program executions for specific errors. However. the need to formally describe correct behavior or errors is a major barrier to the widespread adoption of program verification, since programmers historically have been reluctant to write formal specifications. Automating the process of formulating specification, would remove a barrier to program verification and enhance its practicality. This paper describes specification mining, a machine learning approach to discovering formal specification, of the protocols that code must obey when interacting with an application program interface or abstract data type. Starting from the assumption that a working program is well enough debugged to reveal strong hints of correct protocols, our tool infers a specification by observing program execution and concisely summarizing the frequent interaction patterns as state machines that capture both temporal and data dependences. These state machines can be examined by a programmer, to refine the specification and identity errors, and can be utilized by automatic verification tools, to find bugs. Our preliminary experience with the mining tool has been promising. We were able to learn specifications that not only captured the correct protocol, but also discovered serious bugs.},
  keywords={COMPUTER SCIENCE, SOFTWARE ENGINEERING; INTRUSION DETECTION},
  isbn={0362-1340},
  language={English},
  url={www.summon.com},
}
